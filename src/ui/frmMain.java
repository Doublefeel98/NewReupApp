/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import controller.SmaliController;
import data.Config;
import static data.Config.*;
import models.smali.Clazz;
import utils.FileXML;
import utils.FileFactory;
import java.awt.Desktop;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileSystemView;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeNode;

/**
 *
 * @author THAITHANG
 */
public class frmMain extends javax.swing.JFrame implements iViewMain{
    
    private SmaliController controller;

    /**
     * Creates new form frmMain
     */
    public frmMain() {
        initComponents();
        //set vị trí hiện thị form ở giữa màn hình
        setLocationRelativeTo(null);
        //set dữ liệu cho treeview  bằng null cho mỗi lần mở app
        treeFolder.setModel(null);
        
        //load dữ liệu phiên làm việc trước đó cho việc thực hiện các thao tác đơn giản hơn
        loadHistoryDirectory();
        
        createListMethodDefault();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tpLink = new javax.swing.JTextPane();
        btnOpenPath = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        lsvFile = new javax.swing.JList<>();
        jPanel1 = new javax.swing.JPanel();
        btnAutoChangeMethodFolder = new javax.swing.JButton();
        btnAutoChangeFolderName = new javax.swing.JButton();
        btnOpenFolder = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        btnAutoChangeMethodFile = new javax.swing.JButton();
        btnOpenFile = new javax.swing.JButton();
        btnAutoChangeFileNameFile = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        treeFolder = new javax.swing.JTree();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tpPackageName = new javax.swing.JTextPane();
        jScrollPane5 = new javax.swing.JScrollPane();
        lsvFolderFilesChange = new javax.swing.JList<>();
        jLabel2 = new javax.swing.JLabel();
        btnAddFolderList = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();
        btnAutoAll = new javax.swing.JButton();
        btnAutoTest = new javax.swing.JButton();
        btnTest = new javax.swing.JButton();
        btnSaveAll = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocation(location());

        jScrollPane1.setViewportView(tpLink);

        btnOpenPath.setText("Open Path");
        btnOpenPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpenPathActionPerformed(evt);
            }
        });

        lsvFile.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lsvFileMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(lsvFile);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Folder Function:"));

        btnAutoChangeMethodFolder.setText("Auto Change Method");
        btnAutoChangeMethodFolder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAutoChangeMethodFolderActionPerformed(evt);
            }
        });

        btnAutoChangeFolderName.setText("Auto Change Folder Name");
        btnAutoChangeFolderName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAutoChangeFolderNameActionPerformed(evt);
            }
        });

        btnOpenFolder.setText("Open Folder");
        btnOpenFolder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpenFolderActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnOpenFolder)
                        .addGap(50, 50, 50)
                        .addComponent(btnAutoChangeFolderName))
                    .addComponent(btnAutoChangeMethodFolder))
                .addContainerGap(88, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnOpenFolder)
                    .addComponent(btnAutoChangeFolderName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(btnAutoChangeMethodFolder, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(22, 22, 22))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "File Function:"));

        btnAutoChangeMethodFile.setText("Auto Change Method");
        btnAutoChangeMethodFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAutoChangeMethodFileActionPerformed(evt);
            }
        });

        btnOpenFile.setText("Open File");
        btnOpenFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpenFileActionPerformed(evt);
            }
        });

        btnAutoChangeFileNameFile.setText("Auto Change File Name");
        btnAutoChangeFileNameFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAutoChangeFileNameFileActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(btnAutoChangeMethodFile)
                        .addContainerGap(285, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(btnOpenFile)
                        .addGap(77, 77, 77)
                        .addComponent(btnAutoChangeFileNameFile)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAutoChangeFileNameFile)
                    .addComponent(btnOpenFile, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addComponent(btnAutoChangeMethodFile)
                .addContainerGap(22, Short.MAX_VALUE))
        );

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        treeFolder.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        treeFolder.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                treeFolderMouseClicked(evt);
            }
        });
        treeFolder.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                treeFolderValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(treeFolder);

        jLabel1.setText("Package Name in Android ManiFest:");

        tpPackageName.setEditable(false);
        jScrollPane4.setViewportView(tpPackageName);

        jScrollPane5.setViewportView(lsvFolderFilesChange);

        jLabel2.setText("List File in Folder Change:");

        btnAddFolderList.setText("Add Folder");
        btnAddFolderList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddFolderListActionPerformed(evt);
            }
        });

        btnReset.setText("Reset");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        btnAutoAll.setText("Auto All");
        btnAutoAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAutoAllActionPerformed(evt);
            }
        });

        btnAutoTest.setText("Auto Test");
        btnAutoTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAutoTestActionPerformed(evt);
            }
        });

        btnTest.setText("Test");
        btnTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTestActionPerformed(evt);
            }
        });

        btnSaveAll.setText("Save All");
        btnSaveAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveAllActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(23, 23, 23)
                        .addComponent(btnOpenPath)
                        .addGap(41, 41, 41))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jScrollPane3)
                                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 460, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 773, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnReset)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnAddFolderList)
                                    .addComponent(btnAutoAll))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnTest)
                                    .addComponent(btnAutoTest)
                                    .addComponent(btnSaveAll))))
                        .addGap(27, 27, 27))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnOpenPath)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 504, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 504, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 504, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAddFolderList)
                            .addComponent(btnAutoTest))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnReset)
                            .addComponent(btnTest))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAutoAll)
                            .addComponent(btnSaveAll))))
                .addGap(0, 36, Short.MAX_VALUE))
        );

        btnOpenPath.getAccessibleContext().setAccessibleName("btnOpenFile");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //dùng để lấy đường dẫn thư mục cần làm việc
    private void btnOpenPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpenPathActionPerformed
        JFileChooser jfc;
        if (tpLink.getText().length() == 0) {
            jfc = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
        } else {
            jfc = new JFileChooser(new File(tpLink.getText()));
        }
        jfc.setDialogTitle("Choose a directory to load your file: ");
        jfc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        
        int returnValue = jfc.showOpenDialog(null);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            if (jfc.getSelectedFile().isDirectory()) {
                tpLink.setText(jfc.getSelectedFile().getAbsolutePath());
            }
        }
        else
            return;
        
        //kiểm tra đường dẫn null thì thoát
        if (tpLink.getText().equals("")) {
            return;
        }
        
        //lưu đường dẫn của project làm việc
        projectDir = tpLink.getText();
        
        //lưu đường dẫn của file android manifest
        pathManifest = projectDir + "\\AndroidManifest.xml";
        
        //lưu đường dẫn của folder resouce
        pathRes = projectDir + "\\res";
        
        
        //lưu đường dẫn của folder smali
        pathSmali = projectDir + "\\smali";
        
        loadListPathFileRes();
        
        loadListPathFileSmali();
        
        controller = new SmaliController(listPathFileRes, pathManifest, this);
        
        //load treeview thư mục smali của đường dẫn vừa được chọn
        loadTreeViewFolderSmali(pathSmali);
        
        //lưu lại lịch sử đường dẫn thư mục vừa được mở cho phiên làm việc kế tiếp
        saveHistoryDirectory();
        
        System.out.println("file smali: " + listPathFileSmali.size());
        System.out.println("file res: " + listPathFileRes.size());
    }//GEN-LAST:event_btnOpenPathActionPerformed

    //bắt sự kiện chọn vào một node của treeview để xem danh sách file của thư mục node được chọn
    //áp dụng cho trường hợp chỉ có 1 node được chọn
    private void treeFolderValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_treeFolderValueChanged
        // TODO add your handling code here:

        //xóa dữ liệu bên listview khi có một node được chọn
        lsvFile.setListData(new String[]{});

        //lấy node cuối cùng được chọn, trường hợp này áp dụng chỉ có một node được chọn
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) treeFolder.getLastSelectedPathComponent();
        
        if (node == null) {
            return;
        }
        //lấy đường dẫn thư mục node được chọn
        String pathFolder = projectDir+ getPathNode(node);
        
        if (pathFolder.length() == 0) {
            return;
        }
        loadListViewFile(pathFolder);
    }//GEN-LAST:event_treeFolderValueChanged

    //mở folder explorer của node được chọn để kiểm tra
    private void btnOpenFolderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpenFolderActionPerformed
        //lấy node cuối cùng được chọn, trường hợp này áp dụng chỉ có một node được chọn
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) treeFolder.getLastSelectedPathComponent();
        
        if (node == null) {
            return;
        }
        //lấy đường dẫn thư mục node được chọn
        String pathFolder = projectDir + getPathNode(node);

        //mở thư mục lên kiểm tra
        openFolderAndFile(pathFolder);
    }//GEN-LAST:event_btnOpenFolderActionPerformed

    //tạo sự kiện double click chuột trái vào treeview để đổi tên thư mục
    private void treeFolderMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_treeFolderMouseClicked
        // TODO add your handling code here:
        if (evt.getButton() == MouseEvent.BUTTON1) {//kiểm tra chuột trái được nhấn
            if (evt.getClickCount() == 2) {//kiểm tra coi node đó có được nhấn 2 lần hay ko
                //lấy node cuối cùng được chọn, trường hợp này áp dụng chỉ có một node được chọn
                DefaultMutableTreeNode node = (DefaultMutableTreeNode) treeFolder.getLastSelectedPathComponent();

                if (node == null) {
                    return;
                }
                
                //lưu lại trên cũ của thư mục đó
                String oldName = (String) node.getUserObject();
                
                if(oldName.compareTo("smali") == 0) return;
                
                //lấy đường dẫn thư mục node được chọn
                String oldPath = projectDir + getPathNode(node);

                //tạo dialog lưu tên mới của thư mục
                String newName = JOptionPane.showInputDialog("Enter new name folder");
                
                if(newName == null || newName.length() == 0){
                    JOptionPane.showMessageDialog(null,"Bạn chưa nhập tên mới cho thư mục" ,"Thông báo",JOptionPane.INFORMATION_MESSAGE);
                    return;
                }
                String newPath = oldPath.replace(oldName, newName);
                System.out.println(oldPath + " " + newPath);
                controller.changeFolderName(oldPath, newPath);
            }
        }
    }//GEN-LAST:event_treeFolderMouseClicked

    //mở file được chọn trên listview trong trường hợp chỉ có 1 item được chọn
    private void btnOpenFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpenFileActionPerformed
        //lấy item cuối cùng được chọn, trường hợp này áp dụng chỉ có một node được chọn
        String nameFile = lsvFile.getSelectedValue();
        if (nameFile == null || nameFile.length() == 0) {
            return;
        }

        //lấy node cuối cùng được chọn, trường hợp này áp dụng chỉ có một node được chọn
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) treeFolder.getLastSelectedPathComponent();
        
        if (node == null) {
            return;
        }
        //lấy đường dẫn thư mục node được chọn
        String pathFile = projectDir + getPathNode(node) + "\\" + nameFile;
        System.out.println("open file: "+pathFile);
        //mở file được chọn
        openFolderAndFile(pathFile);
    }//GEN-LAST:event_btnOpenFileActionPerformed

    //tạo sự kiện double click chuột trái vào lsvFile để đổi tên file
    private void lsvFileMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lsvFileMouseClicked
        if (evt.getButton() == MouseEvent.BUTTON1) {//kiểm tra chuột trái được nhấn
            if (evt.getClickCount() == 2) {//kiểm tra coi node đó có được nhấn 2 lần hay ko
                
                //lấy item cuối cùng được chọn, trường hợp này áp dụng chỉ có một node được chọn
                String oldName = lsvFile.getSelectedValue();
                if (oldName == null || oldName.length() == 0) {
                    return;
                }
                
                //lấy node cuối cùng được chọn, trường hợp này áp dụng chỉ có một node được chọn
                DefaultMutableTreeNode node = (DefaultMutableTreeNode) treeFolder.getLastSelectedPathComponent();

                if (node == null) {
                    return;
                }
                
                //lấy đường dẫn thư mục node được chọn
                String pathFile = projectDir + getPathNode(node) + "\\" + oldName;

                //tạo dialog lưu tên mới của thư mục
                String newName = JOptionPane.showInputDialog("Enter new name file");
                
                if(newName == null || newName.length() == 0){
                    JOptionPane.showMessageDialog(null,"Bạn chưa nhập tên mới cho file" ,"Thông báo",JOptionPane.INFORMATION_MESSAGE);
                    return;
                }
                
                System.out.println(oldName + " " + newName);
                controller.changeNewNameFileClazz(pathFile, newName);
            }
        }
    }//GEN-LAST:event_lsvFileMouseClicked

    private void btnAddFolderListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddFolderListActionPerformed
        //lấy node cuối cùng được chọn, trường hợp này áp dụng chỉ có một node được chọn
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) treeFolder.getLastSelectedPathComponent();
        if (node == null) {
            return;
        }
        //lấy đường dẫn thư mục node được chọn
        String pathFolder = projectDir + getPathNode(node);
        String nameFolder = node.getUserObject().toString();
        
        listFolderFilesChange.add(nameFolder);
        lsvFolderFilesChange.setListData(listFolderFilesChange);
        
        listPathFolderChange.add(pathFolder);
        
        //lưu tất cả đường dẫn các file smali
        reloadData();
    }//GEN-LAST:event_btnAddFolderListActionPerformed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        reset();
    }//GEN-LAST:event_btnResetActionPerformed

    private void btnAutoChangeFileNameFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAutoChangeFileNameFileActionPerformed
        controller.autoChangeAllClazzName();
    }//GEN-LAST:event_btnAutoChangeFileNameFileActionPerformed

    private void btnAutoAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAutoAllActionPerformed
        
    }//GEN-LAST:event_btnAutoAllActionPerformed

    private void btnAutoChangeFolderNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAutoChangeFolderNameActionPerformed
        controller.autoChangeAllFolderName();
        loadTreeViewFolderSmali(pathSmali);
    }//GEN-LAST:event_btnAutoChangeFolderNameActionPerformed

    private void btnAutoTestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAutoTestActionPerformed
        controller.autoChangeAllClazzName();
    }//GEN-LAST:event_btnAutoTestActionPerformed

    private void btnAutoChangeMethodFolderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAutoChangeMethodFolderActionPerformed
        controller.changeAllMethodAllFileClazz();
    }//GEN-LAST:event_btnAutoChangeMethodFolderActionPerformed

    private void btnTestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTestActionPerformed
        //lấy item cuối cùng được chọn, trường hợp này áp dụng chỉ có một node được chọn
        String nameFile = lsvFile.getSelectedValue();
        if (nameFile == null || nameFile.length() == 0) {
            return;
        }

        //lấy node cuối cùng được chọn, trường hợp này áp dụng chỉ có một node được chọn
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) treeFolder.getLastSelectedPathComponent();
        
        if (node == null) {
            return;
        }
        //lấy đường dẫn thư mục node được chọn
        String pathFile = projectDir + getPathNode(node) + "\\" + nameFile;
        
        controller.changeAllMethodFileClazz(pathFile);
    }//GEN-LAST:event_btnTestActionPerformed

    private void btnSaveAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveAllActionPerformed
        controller.saveAll();
        loadTreeViewFolderSmali(pathSmali);
    }//GEN-LAST:event_btnSaveAllActionPerformed

    private void btnAutoChangeMethodFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAutoChangeMethodFileActionPerformed
        //lấy item cuối cùng được chọn, trường hợp này áp dụng chỉ có một node được chọn
        String nameFile = lsvFile.getSelectedValue();
        if (nameFile == null || nameFile.length() == 0) {
            return;
        }

        //lấy node cuối cùng được chọn, trường hợp này áp dụng chỉ có một node được chọn
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) treeFolder.getLastSelectedPathComponent();
        
        if (node == null) {
            return;
        }
        
        //lấy đường dẫn thư mục node được chọn
        String pathFile = projectDir + getPathNode(node) + "\\" + nameFile;
        
        controller.changeAllMethodFileClazz(pathFile);
    }//GEN-LAST:event_btnAutoChangeMethodFileActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmMain().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddFolderList;
    private javax.swing.JButton btnAutoAll;
    private javax.swing.JButton btnAutoChangeFileNameFile;
    private javax.swing.JButton btnAutoChangeFolderName;
    private javax.swing.JButton btnAutoChangeMethodFile;
    private javax.swing.JButton btnAutoChangeMethodFolder;
    private javax.swing.JButton btnAutoTest;
    private javax.swing.JButton btnOpenFile;
    private javax.swing.JButton btnOpenFolder;
    private javax.swing.JButton btnOpenPath;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnSaveAll;
    private javax.swing.JButton btnTest;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JList<String> lsvFile;
    private javax.swing.JList<String> lsvFolderFilesChange;
    private javax.swing.JTextPane tpLink;
    private javax.swing.JTextPane tpPackageName;
    private javax.swing.JTree treeFolder;
    // End of variables declaration//GEN-END:variables

    
    //lưu lại đường dẫn folder đang làm việc
    private void saveHistoryDirectory() {
        File currDir = new File("");//lấy đường dẫn nơi lưu thư mục project
        
        String historyPath = currDir.getAbsolutePath() + "\\file.txt";
        String temp = projectDir;
        FileFactory.saveFile(historyPath, temp);
    }
    
        //lấy lại đường dẫn của thư mục cho phiên làm việc trước đó
    private void loadHistoryDirectory() {
        System.out.println("Current dir using System: " + System.getProperty("user.dir"));//lấy đường dẫn nơi lưu thư mục project
        
        File currDir = new File("");//lấy đường dẫn nơi lưu thư mục project
        String historyPath = currDir.getAbsolutePath() + "\\file.txt";
        
        File file = new File(historyPath);
        
        if(!file.exists()) return;
        String temp = FileFactory.readFile(historyPath);
        if (temp.isEmpty()) {
            return;
        }
        tpLink.setText(temp);
    }
    
    //hiện thị package name trong android manifest
    @Override
    public void showPakageNameInManifest(String packageName ) {
        if (packageName.compareTo("") == 0) {
            tpPackageName.setText("Ko tìm thấy package");
        } else {
            tpPackageName.setText(packageName);
        }
    }
    
    //hiện thị cấu trúc cây smali
    private void loadTreeViewFolderSmali(String path) {
        //xóa dữ liệu tree view cho mỗi lần load
        treeFolder.setModel(null);
        //tạo một node gốc mặc định là thư mục smali
        DefaultMutableTreeNode rootNode = new DefaultMutableTreeNode("smali");

        //tạo một cây thư mục trong file smali
        FileFactory.getTreeNodeFolder(path, rootNode);
        
        treeFolder.setModel(new DefaultTreeModel(rootNode));
    }
    
    //trả về đường dẫn từ node gốc đến node hiện tại được truyền vào
    private String getPathNode(DefaultMutableTreeNode node) {
        String path = "\\";
        
        TreeNode[] pathNode = node.getPath();
        
        for (int i = 0; i < pathNode.length; i++) {
            path = path + pathNode[i].toString();
            if (i != pathNode.length - 1) {
                path = path + "\\";
            }
        }
        return path;
    }
    
    //hiện thị danh sách file trong thư mực
    private void loadListViewFile(String pathFolder){
        Vector<String> listFiles = FileFactory.getListFileInFolder(pathFolder);
        
        String nameFile;
        if (listFiles.isEmpty()) {
            return;
        }
        Vector<String> list = new Vector<>();
        for (String path : listFiles) {
            nameFile = path.substring(path.lastIndexOf("\\") + 1);
            list.add(nameFile);
        }        
        lsvFile.setListData(list);
    }

    private void loadListPathFileSmali() {
        FileFactory.getListFiles(pathSmali, listPathFileSmali);
    }

    private void loadListPathFileRes() {
        Vector<String> listPathAllFileRes = new Vector<>();
        FileFactory.getListFiles(pathRes, listPathAllFileRes);
        
        File file;
        FileXML textRes;
        for(String pathFile : listPathAllFileRes){
            file = new File(pathFile);
            if(isFileXML(file.getName())){
                listPathFileRes.add(pathFile);
            }
        }
    }

    @Override
    public void showMessage(String message, boolean loadData) {
        JOptionPane.showMessageDialog(null,message ,"Thông báo",JOptionPane.INFORMATION_MESSAGE);
        if(loadData){
            loadTreeViewFolderSmali(pathSmali);
        }
    }
    
    //dùng để mở trình Folder và File
    private void openFolderAndFile(String path) {
        Desktop desktop = Desktop.getDesktop();
        File dirToOpen = null;
        try {
            dirToOpen = new File(path);
            desktop.open(dirToOpen);
        } catch (IllegalArgumentException iae) {
            System.out.println("File Not Found");
        } catch (IOException ex) {
            Logger.getLogger(frmMain.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void createListMethodDefault() {
        String path = getClass().getResource("../data/listMethodDefault.txt").getPath();
        String content = FileFactory.readFile(path);
        
        String []arr = content.split("\n");
        for(String line : arr){
            methodsDeFault.add(line.trim());
            System.out.println(line);
        }
    }

    @Override
    public void reloadData() {
        
        //
        lsvFolderFilesChange.setListData(listFolderFilesChange);
        
        //lưu tất cả đường dẫn các file smali
        Vector<String> dsFile = new Vector<>();
        
        for(String pathFolder : listPathFolderChange){
            FileFactory.getListFiles(pathFolder, dsFile);
        }
        
        listPathClazzChange.clear();
        
        for(String path : dsFile){
            listPathClazzChange.add(path);
        }
        
        controller.setClazzes(listPathClazzChange);
    }
    
    public void reset(){
        //clear dữ liệu thư mục trên màn hình
        listFolderFilesChange.clear();
        lsvFolderFilesChange.setListData(listFolderFilesChange);
        
        listPathFolderChange.clear();
        
        //clear dữ liệu file dc chọn
        listPathClazzChange.clear();
        controller.setClazzes(listPathClazzChange);
    }
}
